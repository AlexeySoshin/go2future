package main

import (
	"context"
	"fmt"
	"time"
)

type Future(type T) interface {
	Get() Result(T)
	Cancel()
}

type future(type T) struct {
	result   *result(T)
	completed bool
	wait     chan bool
	ctx      context.Context
	cancel   func()
}

type Result(type S) interface {
	Success() S
	Failure() error
}

type result(type S) struct {
	success S
	failure error
}

func (this *result(S)) Success() S {
	return this.success
}

func (this *result(S)) String() string {
	if this.failure != nil {
		return fmt.Sprintf("%v", this.failure)
	} else {
		return fmt.Sprintf("%v", this.success)
	}
}

func (this *result(S)) Failure() error {
	return this.failure
}

func (this *future(T)) Cancel() {
	this.cancel()
}

func (this *future(T)) Get() Result(T) {
	if this.completed {
		return this.result
	} else {
		fmt.Println("Need to wait...")
		select {
		case <-this.wait:
			return this.result
		case <-this.ctx.Done():
			return &result(T){failure: this.ctx.Err()}
		}
	}
}

func NewFuture(type T)(f func() (T, error)) Future(T) {
	fut := &future(T){
		wait: make(chan bool),
	}
	fut.ctx, fut.cancel = context.WithCancel(context.Background())
	go func() {
		success, failure := f()

		fut.result = &result(T){success, failure}
		fut.completed = true
		fut.wait <- true
		close(fut.wait)
	}()

	return fut
}

func main() {

	f1 := NewFuture(func() (string, error) {
		time.Sleep(1000)
		return "F1", nil
	})

	fmt.Printf("ready with %v \n", f1.Get())
	fmt.Printf("trying again with %v \n", f1.Get())

	f2 := NewFuture(func() (string, error) {
		time.Sleep(1000)
		return "F2", fmt.Errorf("something went wrong")
	})

	fmt.Printf("ready with %v \n", f2.Get())

	f3 := NewFuture(func() (string, error) {
		time.Sleep(100)
		fmt.Println("I'm done!")
		return "F3", nil
	})
	f3.Cancel()

	fmt.Printf("ready with %v \n", f3.Get())
}
